public class Operator {
    /*
        运算符
        - 算术运算符
        - 关系运算符
        - 位运算符
        - 逻辑运算符
        - 赋值运算符
        - 其他运算符
     */
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        int c = 25;
        int d = 25;

        //算数运算符
        //前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。
        //后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算
        System.out.println("a + b = " + (a + b));
        System.out.println("a - b = " + (a - b));
        System.out.println("a * b = " + (a * b));
        System.out.println("b / a = " + (b / a));
        System.out.println("b % a = " + (b % a));
        System.out.println("c % a = " + (c % a));
        System.out.println("a++   = " + (a++));
        System.out.println("a--   = " + (a--));
        // 查看  d++ 与 ++d 的不同
        System.out.println("d++   = " + (d++));
        System.out.println("++d   = " + (++d));


        //关系运算符
        System.out.println("a == b = " + (a == b));
        System.out.println("a != b = " + (a != b));
        System.out.println("a > b = " + (a > b));
        System.out.println("a < b = " + (a < b));
        System.out.println("b >= a = " + (b >= a));
        System.out.println("b <= a = " + (b <= a));


        //位运算符
        /*
            操作符	描述	                                                例子
            &	    如果相对应位都是1，则结果为1，否则为0	                    （A＆B），得到12，即0000 1100
            /	    如果相对应位都是 0，则结果为 0，否则为 1	                （A | B）得到61，即 0011 1101
            ^	    如果相对应位值相同，则结果为0，否则为1	                    （A ^ B）得到49，即 0011 0001
            〜	    按位取反运算符翻转操作数的每一位，即0变成1，1变成0。	    （〜A）得到-61，即1100 0011
            <<  	按位左移运算符。左操作数按位左移右操作数指定的位数。	      A << 2得到240，即 1111 0000
            >> 	    按位右移运算符。左操作数按位右移右操作数指定的位数。	      A >> 2得到15即 1111
            >>> 	按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。	A>>>2得到15即0000 1111
         */


        //逻辑运算符
        /*
            操作符	       描述	                                                    例子
            &&	        称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。	    （A && B）为假。
            //	        称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。	（A | | B）为真。
            !	        称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，
                        则逻辑非运算符将得到false。	                                !(A && B)为真。
         */


        //赋值运算符
        /*
            操作符	                描述	                                                例子
               =	           简单的赋值运算符，将右操作数的值赋给左侧操作数	                C = A + B将把A + B得到的值赋给C
               + =	           加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数	        C + = A等价于C = C + A
               - =	           减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数	        C - = A等价于C = C - A
               * =	           乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数	        C * = A等价于C = C * A
               / =	           除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数	        C / = A，C 与 A 同类型时等价于 C = C / A
               (%)=	           取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数	    C％= A等价于C = C％A
               << =	           左移位赋值运算符	C << = 2等价于C = C << 2
               >> =	           右移位赋值运算符	C >> = 2等价于C = C >> 2
               &=	           按位与赋值运算符	C＆= 2等价于C = C＆2
               ^ =	           按位异或赋值操作符	C ^ = 2等价于C = C ^ 2
               | =	           按位或赋值操作符	C | = 2等价于C = C | 2
         */


        //条件运算符
        /*
            三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值
            variable x = (expression) ? value if true : value if false
         */
        int x, y;
        x = 10;
        y = (x == 5) ? 20 : 30;
        System.out.println("Value of y is " + y);

        y = (x == 10) ? 20 : 30;
        System.out.println("Value of y is " + y);


        //运算符优先级
        /*
            类别	    操作符	                    关联性
            后缀	    () [] . (点操作符)	            左到右
            一元	    + + - !〜	                    从右到左
            乘性 	    * /%	                        左到右
            加性 	    + -	                            左到右
            移位 	    >> >>>  << 	                    左到右
            关系 	    >> = << = 	                    左到右
            相等 	    ==  !=	                        左到右
            按位与	    &	                            左到右
            按位异或    	^	                            左到右
            按位或	    /	                            左到右
            逻辑与	    &&	                            左到右
            逻辑或	    //                              左到右
            条件	    ？：	                        从右到左
            赋值	    = + = - = * = / =％= >> = << =＆= ^ = | =	从右到左
            逗号	    ，	                            左到右
         */

    }
}
